// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/simplecolding/douyin/cmd/follow/orm/model"
)

func newFollowUser(db *gorm.DB, opts ...gen.DOOption) followUser {
	_followUser := followUser{}

	_followUser.followUserDo.UseDB(db, opts...)
	_followUser.followUserDo.UseModel(&model.FollowUser{})

	tableName := _followUser.followUserDo.TableName()
	_followUser.ALL = field.NewAsterisk(tableName)
	_followUser.ID = field.NewInt32(tableName, "id")
	_followUser.UserID = field.NewString(tableName, "user_id")
	_followUser.FollowID = field.NewString(tableName, "follow_id")
	_followUser.Status = field.NewBool(tableName, "status")
	_followUser.CreatedAt = field.NewTime(tableName, "created_at")
	_followUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_followUser.fillFieldMap()

	return _followUser
}

type followUser struct {
	followUserDo

	ALL       field.Asterisk
	ID        field.Int32  // 主键
	UserID    field.String // 用户id
	FollowID  field.String // 关注id
	Status    field.Bool   // 是否删除 1:是  0:否
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f followUser) Table(newTableName string) *followUser {
	f.followUserDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followUser) As(alias string) *followUser {
	f.followUserDo.DO = *(f.followUserDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followUser) updateTableName(table string) *followUser {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.UserID = field.NewString(table, "user_id")
	f.FollowID = field.NewString(table, "follow_id")
	f.Status = field.NewBool(table, "status")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *followUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followUser) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["follow_id"] = f.FollowID
	f.fieldMap["status"] = f.Status
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f followUser) clone(db *gorm.DB) followUser {
	f.followUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followUser) replaceDB(db *gorm.DB) followUser {
	f.followUserDo.ReplaceDB(db)
	return f
}

type followUserDo struct{ gen.DO }

type IFollowUserDo interface {
	gen.SubQuery
	Debug() IFollowUserDo
	WithContext(ctx context.Context) IFollowUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFollowUserDo
	WriteDB() IFollowUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFollowUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFollowUserDo
	Not(conds ...gen.Condition) IFollowUserDo
	Or(conds ...gen.Condition) IFollowUserDo
	Select(conds ...field.Expr) IFollowUserDo
	Where(conds ...gen.Condition) IFollowUserDo
	Order(conds ...field.Expr) IFollowUserDo
	Distinct(cols ...field.Expr) IFollowUserDo
	Omit(cols ...field.Expr) IFollowUserDo
	Join(table schema.Tabler, on ...field.Expr) IFollowUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFollowUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFollowUserDo
	Group(cols ...field.Expr) IFollowUserDo
	Having(conds ...gen.Condition) IFollowUserDo
	Limit(limit int) IFollowUserDo
	Offset(offset int) IFollowUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowUserDo
	Unscoped() IFollowUserDo
	Create(values ...*model.FollowUser) error
	CreateInBatches(values []*model.FollowUser, batchSize int) error
	Save(values ...*model.FollowUser) error
	First() (*model.FollowUser, error)
	Take() (*model.FollowUser, error)
	Last() (*model.FollowUser, error)
	Find() ([]*model.FollowUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowUser, err error)
	FindInBatches(result *[]*model.FollowUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FollowUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFollowUserDo
	Assign(attrs ...field.AssignExpr) IFollowUserDo
	Joins(fields ...field.RelationField) IFollowUserDo
	Preload(fields ...field.RelationField) IFollowUserDo
	FirstOrInit() (*model.FollowUser, error)
	FirstOrCreate() (*model.FollowUser, error)
	FindByPage(offset int, limit int) (result []*model.FollowUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFollowUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f followUserDo) Debug() IFollowUserDo {
	return f.withDO(f.DO.Debug())
}

func (f followUserDo) WithContext(ctx context.Context) IFollowUserDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followUserDo) ReadDB() IFollowUserDo {
	return f.Clauses(dbresolver.Read)
}

func (f followUserDo) WriteDB() IFollowUserDo {
	return f.Clauses(dbresolver.Write)
}

func (f followUserDo) Session(config *gorm.Session) IFollowUserDo {
	return f.withDO(f.DO.Session(config))
}

func (f followUserDo) Clauses(conds ...clause.Expression) IFollowUserDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followUserDo) Returning(value interface{}, columns ...string) IFollowUserDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followUserDo) Not(conds ...gen.Condition) IFollowUserDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followUserDo) Or(conds ...gen.Condition) IFollowUserDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followUserDo) Select(conds ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followUserDo) Where(conds ...gen.Condition) IFollowUserDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFollowUserDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followUserDo) Order(conds ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followUserDo) Distinct(cols ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followUserDo) Omit(cols ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followUserDo) Join(table schema.Tabler, on ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followUserDo) Group(cols ...field.Expr) IFollowUserDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followUserDo) Having(conds ...gen.Condition) IFollowUserDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followUserDo) Limit(limit int) IFollowUserDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followUserDo) Offset(offset int) IFollowUserDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowUserDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followUserDo) Unscoped() IFollowUserDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followUserDo) Create(values ...*model.FollowUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followUserDo) CreateInBatches(values []*model.FollowUser, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followUserDo) Save(values ...*model.FollowUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followUserDo) First() (*model.FollowUser, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowUser), nil
	}
}

func (f followUserDo) Take() (*model.FollowUser, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowUser), nil
	}
}

func (f followUserDo) Last() (*model.FollowUser, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowUser), nil
	}
}

func (f followUserDo) Find() ([]*model.FollowUser, error) {
	result, err := f.DO.Find()
	return result.([]*model.FollowUser), err
}

func (f followUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowUser, err error) {
	buf := make([]*model.FollowUser, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followUserDo) FindInBatches(result *[]*model.FollowUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followUserDo) Attrs(attrs ...field.AssignExpr) IFollowUserDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followUserDo) Assign(attrs ...field.AssignExpr) IFollowUserDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followUserDo) Joins(fields ...field.RelationField) IFollowUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followUserDo) Preload(fields ...field.RelationField) IFollowUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followUserDo) FirstOrInit() (*model.FollowUser, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowUser), nil
	}
}

func (f followUserDo) FirstOrCreate() (*model.FollowUser, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowUser), nil
	}
}

func (f followUserDo) FindByPage(offset int, limit int) (result []*model.FollowUser, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followUserDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followUserDo) Delete(models ...*model.FollowUser) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followUserDo) withDO(do gen.Dao) *followUserDo {
	f.DO = *do.(*gen.DO)
	return f
}
