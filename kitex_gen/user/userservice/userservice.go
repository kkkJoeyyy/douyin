// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github.com/simplecolding/douyin/kitex_gen/user"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LoginUser":    kitex.NewMethodInfo(loginUserHandler, newLoginUserArgs, newLoginUserResult, false),
		"RegisterUser": kitex.NewMethodInfo(registerUserHandler, newRegisterUserArgs, newRegisterUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.core",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DouyinUserLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).LoginUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginUserArgs:
		success, err := handler.(user.UserService).LoginUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginUserResult)
		realResult.Success = success
	}
	return nil
}
func newLoginUserArgs() interface{} {
	return &LoginUserArgs{}
}

func newLoginUserResult() interface{} {
	return &LoginUserResult{}
}

type LoginUserArgs struct {
	Req *user.DouyinUserLoginRequest
}

func (p *LoginUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DouyinUserLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginUserArgs) Unmarshal(in []byte) error {
	msg := new(user.DouyinUserLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginUserArgs_Req_DEFAULT *user.DouyinUserLoginRequest

func (p *LoginUserArgs) GetReq() *user.DouyinUserLoginRequest {
	if !p.IsSetReq() {
		return LoginUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type LoginUserResult struct {
	Success *user.DouyinUserLoginResponse
}

var LoginUserResult_Success_DEFAULT *user.DouyinUserLoginResponse

func (p *LoginUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DouyinUserLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginUserResult) Unmarshal(in []byte) error {
	msg := new(user.DouyinUserLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginUserResult) GetSuccess() *user.DouyinUserLoginResponse {
	if !p.IsSetSuccess() {
		return LoginUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DouyinUserLoginResponse)
}

func (p *LoginUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DouyinUserRegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).RegisterUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterUserArgs:
		success, err := handler.(user.UserService).RegisterUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterUserResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterUserArgs() interface{} {
	return &RegisterUserArgs{}
}

func newRegisterUserResult() interface{} {
	return &RegisterUserResult{}
}

type RegisterUserArgs struct {
	Req *user.DouyinUserRegisterRequest
}

func (p *RegisterUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DouyinUserRegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterUserArgs) Unmarshal(in []byte) error {
	msg := new(user.DouyinUserRegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterUserArgs_Req_DEFAULT *user.DouyinUserRegisterRequest

func (p *RegisterUserArgs) GetReq() *user.DouyinUserRegisterRequest {
	if !p.IsSetReq() {
		return RegisterUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterUserResult struct {
	Success *user.DouyinUserRegisterResponse
}

var RegisterUserResult_Success_DEFAULT *user.DouyinUserRegisterResponse

func (p *RegisterUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DouyinUserRegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterUserResult) Unmarshal(in []byte) error {
	msg := new(user.DouyinUserRegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterUserResult) GetSuccess() *user.DouyinUserRegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DouyinUserRegisterResponse)
}

func (p *RegisterUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginUser(ctx context.Context, Req *user.DouyinUserLoginRequest) (r *user.DouyinUserLoginResponse, err error) {
	var _args LoginUserArgs
	_args.Req = Req
	var _result LoginUserResult
	if err = p.c.Call(ctx, "LoginUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterUser(ctx context.Context, Req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args RegisterUserArgs
	_args.Req = Req
	var _result RegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
