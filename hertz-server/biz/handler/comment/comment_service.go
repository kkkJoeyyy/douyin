// Code generated by hertz generator.

package comment

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	comment "github.com/simplecolding/douyin/hertz-server/biz/model/hertz/comment"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/dal"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/model"
	"github.com/simplecolding/douyin/hertz-server/biz/utils"
)

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(comment.DouyinCommentActionResponse)
	// jwt授权，从token中获取uid
	// u, _ := c.Get(mw.JwtMiddleware.IdentityKey)
	// println("comment:", u.(*mw.Claim).ID, u.(*mw.Claim).Username)
	// 鉴权
	flag, _, uid := utils.Auth(ctx, req.Token)
	if !flag {
		c.JSON(consts.StatusBadRequest, "token错误")
		return
	}
	dal.UserAuth.Where(dal.UserAuth.UID.Eq(uid))

	if err != nil {
		c.JSON(consts.StatusBadRequest, "id not found")
		return
	}

	action := req.ActionType
	if action == 1 {
		// SH timezone
		var cstSh, _ = time.LoadLocation("Asia/Shanghai")
		t := time.Now().In(cstSh)
		err = dal.Comment.Create(&model.Comment{UID: uid, Vid: req.VideoId, Content: req.CommentText,
			CreatedAt: t})
	}
	if action == 2 {
		cid := req.CommentId
		_, err = dal.Comment.Delete(&model.Comment{Cid: cid})
	}
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetCommentList .
// @router /douyin/comment/list [GET]
func GetCommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(comment.DouyinCommentListResponse)
	data, err := dal.Comment.Where(dal.Comment.Vid.Eq(req.VideoId)).Order(dal.Comment.UpdatedAt.Desc()).Find()
	var commentList []*comment.Comment
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = "find comments from videoId failed"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "success"
	fmt.Println(data)
	for _, d := range data {
		var v comment.Comment
		v.Id = d.Cid
		v.Content = d.Content
		// 评论发布日期，格式 mm-dd
		v.CreateDate = d.CreatedAt.Format("01-02 15:04:05")
		//userInfoDatabase, err := dal.UserAuth.Where(dal.UserAuth.UID.Eq(d.UID)).Find()
		//if err != nil {
		//	continue
		//}
		//var userInfo comment.User
		//for _, t := range userInfoDatabase {
		//	userInfo.Id = t.UID
		//	userInfo.Name = t.UserName
		//}
		userInfo := CommentQueryUser(d.UID)
		v.User = &userInfo

		commentList = append(commentList, &v)
	}
	resp.CommentList = commentList

	c.JSON(consts.StatusOK, resp)
}

// CommentQueryUser query userinfo
func CommentQueryUser(uid int64) comment.User {
	dal.UserAuth.Where(dal.UserAuth.UID.Eq(uid))
	totalFavorited := int64(0)
	v, err := dal.Video.Where(dal.Video.UID.Eq(uid)).Find()
	for _, t := range v {
		tmpcount, _ := dal.Favorite.Where(dal.Favorite.Vid.Eq(t.Vid)).Count()
		totalFavorited += tmpcount
	}
	// 低性能代码
	workCount, _ := dal.Video.Where(dal.Video.UID.Eq(uid)).Count()
	favoriteCount, _ := dal.Favorite.Where(dal.Favorite.UID.Eq(uid)).Count()
	userInfoDB, err := dal.UserAuth.Where(dal.UserAuth.UID.Eq(uid)).First()
	if err != nil {
		println("database err")
	}
	userInfoDB.WorkCount = workCount
	userInfoDB.FavoriteCount = favoriteCount
	userInfoDB.TotalFavorite = strconv.FormatInt(totalFavorited, 10)
	dal.UserAuth.Save(userInfoDB)

	return comment.User{
		Id:              userInfoDB.UID,
		Name:            userInfoDB.UserName,
		FollowCount:     userInfoDB.FollowCount,
		IsFollow:        userInfoDB.IsFollow,
		Avatar:          userInfoDB.Avatar,
		BackgroundImage: userInfoDB.BackgroundImage,
		Signature:       userInfoDB.Signature,
		TotalFavorited:  userInfoDB.TotalFavorite,
		WorkCount:       userInfoDB.WorkCount,
		FavoriteCount:   userInfoDB.FavoriteCount,
	}
}
