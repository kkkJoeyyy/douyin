// Code generated by hertz generator.

package comment

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	comment "github.com/simplecolding/douyin/hertz-server/biz/model/hertz/comment"
	"github.com/simplecolding/douyin/hertz-server/biz/mw"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/dal"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/model"
)

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(comment.DouyinCommentActionResponse)
	// jwt授权，从token中获取uid
	u, _ := c.Get(mw.JwtMiddleware.IdentityKey)
	println("comment:", u.(*mw.Claim).ID, u.(*mw.Claim).Username)
	action := req.ActionType
	if action == 1 {
		dal.Comment.Create(&model.Comment{UID: u.(*mw.Claim).ID, Vid: req.VideoId, Content: req.CommentText})
	} else {
		cid := req.CommentId
		dal.Comment.Delete(&model.Comment{Cid: cid})
	}
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetCommentList .
// @router /douyin/comment/list [GET]
func GetCommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req comment.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(comment.DouyinCommentListResponse)
	data, err := dal.Comment.Where(dal.Comment.Vid.Eq(req.VideoId)).Find()
	var commentList []*comment.Comment
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = "failed"
	} else {
		resp.StatusCode = 0
		resp.StatusMsg = "success"
		for _, d := range data {
			var v comment.Comment
			v.Id = d.Cid
			v.Content = d.Content
			v.CreateDate = d.CreatedAt.String()
			userInfoDatabase, _ := dal.UserAuth.Where(dal.UserAuth.UID.Eq(v.Id)).Find()
			var userInfo comment.User
			for _, t := range userInfoDatabase {
				userInfo.Id = t.UID
				userInfo.Name = t.UserName
			}
			v.User = &userInfo
			commentList = append(commentList, &v)
		}
		resp.CommentList = commentList
	}
	c.JSON(consts.StatusOK, resp)
}
