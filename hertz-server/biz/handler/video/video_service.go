// Code generated by hertz generator.

package video

import (
	"context"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/simplecolding/douyin/hertz-server/biz/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	video "github.com/simplecolding/douyin/hertz-server/biz/model/hertz/video"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/dal"
	"github.com/simplecolding/douyin/hertz-server/biz/orm/model"
)

// VideoPublish .
// @router /douyin/publish/action [POST]
func VideoPublish(ctx context.Context, c *app.RequestContext) {
	//req.Data type : bytes
	var err error
	var r video.PublishActionRequest
	var resp video.DouyinPublishActionResponse
	var byteContainer []byte
	err = c.BindAndValidate(&r)
	if err != nil {
		fmt.Println("err in bind", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	// auth
	flag, userName, uid := utils.Auth(ctx, r.Token)
	if !flag {
		c.JSON(consts.StatusBadRequest, "token错误")
		return
	}
	// 将*multipart.FileHeader转为byte[]
	file := r.Data
	fileContent, _ := file.Open()
	// defer file.Close()
	byteContainer, err = ioutil.ReadAll(fileContent)
	if err != nil {
		fmt.Println("err in read file, err: ", err)
		c.String(consts.StatusBadRequest, err.Error())
	}

	fileName := strconv.FormatInt(time.Now().Unix(), 10) + userName
	if err != nil {
		println("get filetype failed")
		return
	}
	filePath := filepath.Join("./biz/public", fileName+".mp4")

	newFile, err := os.Create(filePath)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		println("create file failed")
		return
	}
	defer newFile.Close()
	if _, err := newFile.Write(byteContainer); err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		println("write file failed")
		return
	}

	playUrl := utils.PlayURL + fileName + ".mp4"
	println("playUrl: ", playUrl)
	// title := "test"
	// test
	err = dal.Video.WithContext(ctx).Create(&model.Video{UID: uid, PlayURL: playUrl, CoverURL: utils.CoverTestURL,Title: r.Title})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		println("write to database failed")
		return
	}
	println(filePath)
	resp.StatusCode = 0
	resp.StatusMsg = "success"

	c.JSON(consts.StatusOK, resp)
}

// GetPublishList .
// @router /douyin/publish/list [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	// auth
	flag, _, uid := utils.Auth(ctx, req.Token)
	if !flag || uid != req.UserId {
		c.JSON(consts.StatusBadRequest, "token错误")
		return
	}

	resp := new(video.DouyinFavoriteListResponse)
	// todo 需要limit8?分页??
	data, err := dal.Video.Where(dal.Video.UID.Eq(uid)).Find()
	if err != nil {
		println("query database failed")
		return
	}
	// query userinfo
	userInfo := VideoQueryUser(uid)

	var v []*video.Video
	for _, d := range data {
		vid := d.Vid
		var tmp video.Video
		tmp.Id = d.Vid
		tmp.CoverUrl = d.PlayURL
		tmp.PlayUrl = d.PlayURL
		tmp.CoverUrl = d.CoverURL
		tmp.FavoriteCount, _ = dal.Video.Where(dal.Video.Vid.Eq(vid)).Count()
		tmp.CommentCount, _ = dal.Comment.Where(dal.Comment.Vid.Eq(vid)).Count()
		fav, _ := dal.Favorite.CountVidAndUid(vid, uid)
		tmp.IsFavorite = len(fav) >= 1
		tmp.Title = d.Title
		tmp.Author = &userInfo
		v = append(v, &tmp)
	}
	resp.VideoList = v
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFeed .
// @router /douyin/feed [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.DouyinFeedResponse)
	// todo
	// 30 videos for a single time
	limit := 30
	// Not test
	data, err := dal.Video.Order(dal.Video.UpdatedAt.Desc()).Limit(limit).Find()
	if err != nil {
		println("query database failed")
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = "success"
	var v []*video.Video
	for _, d := range data {
		var tmp video.Video
		tmp.Id = d.Vid
		tmp.CoverUrl = d.CoverURL
		tmp.PlayUrl = d.PlayURL
		v = append(v, &tmp)
	}
	resp.VideoList = v
	c.JSON(consts.StatusOK, resp)
}

// VideoQueryUser query userinfo
func VideoQueryUser(uid int64) video.User {
	dal.UserAuth.Where(dal.UserAuth.UID.Eq(uid))
	totalFavorited := int64(0)
	v, err := dal.Video.Where(dal.Video.UID.Eq(uid)).Find()
	for _, t := range v {
		tmpcount, _ := dal.Favorite.Where(dal.Favorite.Vid.Eq(t.Vid)).Count()
		totalFavorited += tmpcount
	}
	// 低性能代码
	workCount, _ := dal.Video.Where(dal.Video.UID.Eq(uid)).Count()
	favoriteCount, _ := dal.Favorite.Where(dal.Favorite.UID.Eq(uid)).Count()
	userInfoDB, err := dal.UserAuth.Where(dal.UserAuth.UID.Eq(uid)).First()
	if err != nil {
		println("database err")
	}
	userInfoDB.WorkCount = workCount
	userInfoDB.FavoriteCount = favoriteCount
	userInfoDB.TotalFavorite = strconv.FormatInt(totalFavorited, 10)
	dal.UserAuth.Save(userInfoDB)

	return video.User{
		Id:              userInfoDB.UID,
		Name:            userInfoDB.UserName,
		FollowCount:     userInfoDB.FollowCount,
		IsFollow:        userInfoDB.IsFollow,
		Avatar:          userInfoDB.Avatar,
		BackgroundImage: userInfoDB.BackgroundImage,
		Signature:       userInfoDB.Signature,
		TotalFavorited:  userInfoDB.TotalFavorite,
		WorkCount:       userInfoDB.WorkCount,
		FavoriteCount:   userInfoDB.FavoriteCount,
	}
}
